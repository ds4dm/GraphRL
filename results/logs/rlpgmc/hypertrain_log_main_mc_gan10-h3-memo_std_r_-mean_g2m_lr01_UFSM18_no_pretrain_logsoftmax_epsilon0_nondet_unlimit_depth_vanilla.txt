nohup: ignoring input
[[1 2 3]
 [4 5 6]]
| Xavier Initialization
| Xavier Initialization
| Xavier Initialization
| Xavier Initialization
| Xavier Initialization
| Xavier Initialization
| Xavier Initialization
| Xavier Initialization
| Xavier Initialization
| Xavier Initialization
Supervised Training started
heuristic: min_degree actor learning rate: [0.01] epochs: 500 Train DataSet: UFSMDataset_Demo

Use Critic:
False
/local_workspace/liudefen/PycharmProjects/PycharmProjects/GraphRL/gcn/models_gcn.py:382: UserWarning: Implicit dimension choice for log_softmax has been deprecated. Change the call to include dim=X as an argument.
  features = F.log_softmax(features.view(-1))
parameter name actor.gc1.weight parameter value tensor(1.00000e-02 *
       [[-0.9227, -0.9700,  1.7539]], device='cuda:0')
parameter name actor.gc1.a parameter value tensor([[-0.6024],
        [ 0.3741],
        [-0.2633],
        [ 0.6714],
        [ 0.5574],
        [ 0.7150]], device='cuda:0')
parameter name actor.gc1.bias parameter value tensor(1.00000e-02 *
       [[-0.0944, -2.6041,  0.5327]], device='cuda:0')
parameter name actor.gc2.weight parameter value tensor(1.00000e-02 *
       [[ 1.0345,  0.6951,  0.1422],
        [ 1.2427, -0.0631, -1.4460],
        [-0.1176, -0.2341,  0.7312]], device='cuda:0')
parameter name actor.gc2.a parameter value tensor([[-0.9566],
        [-0.6822],
        [-1.9340],
        [ 1.1368],
        [ 0.4525],
        [ 0.3557]], device='cuda:0')
parameter name actor.gc2.bias parameter value tensor(1.00000e-03 *
       [[-7.2194,  7.1707,  2.5987]], device='cuda:0')
parameter name actor.gc3.weight parameter value tensor(1.00000e-02 *
       [[-0.6461,  1.9206,  1.5957],
        [ 0.6131, -0.7574,  0.7997],
        [ 1.7174, -1.5391, -0.2828]], device='cuda:0')
parameter name actor.gc3.a parameter value tensor([[ 1.0012],
        [-0.5404],
        [ 0.2274],
        [-0.0129],
        [-0.3859],
        [ 1.3965]], device='cuda:0')
parameter name actor.gc3.bias parameter value tensor(1.00000e-02 *
       [[-0.8249, -2.4770, -0.2488]], device='cuda:0')
parameter name actor.gc4.weight parameter value tensor(1.00000e-02 *
       [[ 1.9266,  0.0974,  1.6824],
        [ 1.1110,  1.4176, -0.4114],
        [ 0.7386,  0.0099,  0.6742]], device='cuda:0')
parameter name actor.gc4.a parameter value tensor([[ 0.1475],
        [-1.0176],
        [ 0.1102],
        [-1.3011],
        [-0.1895],
        [ 0.5452]], device='cuda:0')
parameter name actor.gc4.bias parameter value tensor(1.00000e-02 *
       [[ 2.4375,  0.2285, -0.6314]], device='cuda:0')
parameter name actor.gc5.weight parameter value tensor(1.00000e-02 *
       [[ 1.1960,  0.2652, -1.8191],
        [ 1.3845,  0.8463, -0.2992],
        [-0.3368,  1.0161,  0.7192]], device='cuda:0')
parameter name actor.gc5.a parameter value tensor([[-0.0646],
        [-0.3283],
        [-0.9297],
        [-0.0443],
        [-0.9958],
        [-0.3936]], device='cuda:0')
parameter name actor.gc5.bias parameter value tensor(1.00000e-02 *
       [[ 2.7463, -0.1957,  1.1825]], device='cuda:0')
parameter name actor.gc6.weight parameter value tensor(1.00000e-02 *
       [[ 0.5046,  0.1217, -0.8877],
        [ 0.6530, -2.3964,  1.9318],
        [-1.3662, -1.2761,  0.3175]], device='cuda:0')
parameter name actor.gc6.a parameter value tensor([[-0.7704],
        [ 2.0717],
        [-0.0734],
        [-0.0707],
        [-0.8081],
        [-0.9834]], device='cuda:0')
parameter name actor.gc6.bias parameter value tensor(1.00000e-02 *
       [[-0.9196,  0.2171, -2.3674]], device='cuda:0')
parameter name actor.gc7.weight parameter value tensor(1.00000e-02 *
       [[-2.1291, -0.5310, -1.8243],
        [ 1.7208,  0.8952,  0.5887],
        [-1.0403,  0.2765,  0.1641]], device='cuda:0')
parameter name actor.gc7.a parameter value tensor([[ 0.3509],
        [ 0.6851],
        [ 0.5613],
        [ 0.0897],
        [-0.3465],
        [-0.7351]], device='cuda:0')
parameter name actor.gc7.bias parameter value tensor(1.00000e-02 *
       [[-0.1488,  1.9063, -2.0868]], device='cuda:0')
parameter name actor.gc8.weight parameter value tensor(1.00000e-02 *
       [[-0.1990, -1.1674,  0.0816],
        [-0.0781,  0.4941,  1.4067],
        [ 0.4697, -0.0446, -2.0932]], device='cuda:0')
parameter name actor.gc8.a parameter value tensor([[-1.4039],
        [ 0.6253],
        [ 1.0216],
        [ 0.1525],
        [-0.5622],
        [-0.0834]], device='cuda:0')
parameter name actor.gc8.bias parameter value tensor(1.00000e-02 *
       [[-1.3433,  0.4558, -1.6643]], device='cuda:0')
parameter name actor.gc9.weight parameter value tensor(1.00000e-02 *
       [[ 0.1377,  1.6048, -2.2247],
        [ 2.3656,  0.6601,  2.2350],
        [-0.9354,  0.0775,  2.4901]], device='cuda:0')
parameter name actor.gc9.a parameter value tensor([[ 0.6850],
        [-0.7321],
        [ 0.2690],
        [ 1.0260],
        [ 0.4258],
        [ 0.6536]], device='cuda:0')
parameter name actor.gc9.bias parameter value tensor(1.00000e-02 *
       [[ 0.1189,  1.1356,  0.6687]], device='cuda:0')
parameter name actor.gc10.weight parameter value tensor(1.00000e-02 *
       [[ 1.6476],
        [ 0.4884],
        [ 0.9531]], device='cuda:0')
parameter name actor.gc10.a parameter value tensor([[-0.9387],
        [-0.2340]], device='cuda:0')
parameter name actor.gc10.bias parameter value tensor(1.00000e-02 *
       [[-3.4256]], device='cuda:0')
/local_workspace/liudefen/PycharmProjects/PycharmProjects/GraphRL/rl/train_a2c_mc.py:542: RuntimeWarning: invalid value encountered in double_scalars
  _val_ave_gcn = np.sum(val_gcn_greedy) / len(val_gcn_greedy)
/local_workspace/liudefen/PycharmProjects/PycharmProjects/GraphRL/rl/train_a2c_mc.py:548: RuntimeWarning: invalid value encountered in double_scalars
  _val_ave_mind = np.sum(val_mind) / len(val_mind)
epochs 0 loss -754.2942504882812 train min_degreeperformance 8959.0 train gcn performance 230354.0 val min_degreeperformance nan val gcn performance nan
epochs 1 loss -754.2978515625 train min_degreeperformance 8959.0 train gcn performance 242353.0 val min_degreeperformance nan val gcn performance nan
epochs 2 loss -863.2025146484375 train min_degreeperformance 8959.0 train gcn performance 251498.0 val min_degreeperformance nan val gcn performance nan
epochs 3 loss -712.8838500976562 train min_degreeperformance 8959.0 train gcn performance 248391.0 val min_degreeperformance nan val gcn performance nan
epochs 4 loss -707.4400634765625 train min_degreeperformance 8959.0 train gcn performance 226062.0 val min_degreeperformance nan val gcn performance nan
epochs 5 loss -741.1320190429688 train min_degreeperformance 8959.0 train gcn performance 334051.0 val min_degreeperformance nan val gcn performance nan
epochs 6 loss -777.2989501953125 train min_degreeperformance 8959.0 train gcn performance 222532.0 val min_degreeperformance nan val gcn performance nan
epochs 7 loss -838.3094482421875 train min_degreeperformance 8959.0 train gcn performance 232492.0 val min_degreeperformance nan val gcn performance nan
epochs 8 loss -848.310302734375 train min_degreeperformance 8959.0 train gcn performance 261890.0 val min_degreeperformance nan val gcn performance nan
epochs 9 loss -683.8272094726562 train min_degreeperformance 8959.0 train gcn performance 402714.0 val min_degreeperformance nan val gcn performance nan
THCudaCheck FAIL file=/opt/conda/conda-bld/pytorch_1524586445097/work/aten/src/THC/generic/THCStorage.cu line=58 error=2 : out of memory
Traceback (most recent call last):
  File "main_mc.py", line 258, in <module>
    density = args.p
  File "/local_workspace/liudefen/PycharmProjects/PycharmProjects/GraphRL/rl/train_a2c_mc.py", line 374, in train_and_validate
    action, log_prob, reward, value_current, value_next, x_model = self.model(x_model) # forward propagation,action: node selected, reward: nb edges added
  File "/home/x86_64-unknown-linux_ol7-gnu/anaconda-5.2.0/envs/pytorch/lib/python3.6/site-packages/torch/nn/modules/module.py", line 491, in __call__
    result = self.forward(*input, **kwargs)
  File "/local_workspace/liudefen/PycharmProjects/PycharmProjects/GraphRL/rl/model_a2c.py", line 167, in forward
    probs = self.actor(features, adj_M)  # call actor to get a selection distribution
  File "/home/x86_64-unknown-linux_ol7-gnu/anaconda-5.2.0/envs/pytorch/lib/python3.6/site-packages/torch/nn/modules/module.py", line 491, in __call__
    result = self.forward(*input, **kwargs)
  File "/local_workspace/liudefen/PycharmProjects/PycharmProjects/GraphRL/gcn/models_gcn.py", line 374, in forward
    features = self.gc7(features, adj_matrix)
  File "/home/x86_64-unknown-linux_ol7-gnu/anaconda-5.2.0/envs/pytorch/lib/python3.6/site-packages/torch/nn/modules/module.py", line 491, in __call__
    result = self.forward(*input, **kwargs)
  File "/local_workspace/liudefen/PycharmProjects/PycharmProjects/GraphRL/gcn/layers_gcn.py", line 415, in forward
    features = torch.spmm(atten_sparse, features) + features_hat # adjacency matrix * features
RuntimeError: cuda runtime error (2) : out of memory at /opt/conda/conda-bld/pytorch_1524586445097/work/aten/src/THC/generic/THCStorage.cu:58
